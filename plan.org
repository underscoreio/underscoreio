#+TITLE: Core Scala

* Everything is an object
  - In Scala, everything is an object. We interact with objects by method calls.
** Literals
   - Let's create some objects and interact with them at the REPL.
   - A literal expression is the simplest way to create an object
   - What is a literal? A program that literal stands for the value it creates. E.g. "foo", 2
   - What is an expression? A program that evaluates to a value. Scala is an "expression oriented" language, means most program constructs in Scala are expressions.
   - Examples of literals
** Compound Expressions
** Object Literals
   - Instance variables (val)
   - Methods
     - Methods are expressions (no return)
     - Types declarations and type inference
   - The type of an object
   - Objects are values
* Modelling Data with Objects
** Classes
   - Constructors
   - Classes let us abstract over objects
   - Apply syntax?
   - Companion objects
     - additional constructors
     - apply method and convention as a constructor
     - case classes as formalism of common pattern
   - Functions
** Objects that are this or that
   - Traits abstract over interface and implementation
   - case classes
   - uniform access principle
     - methods of no arguments
   - def vs val in traits / overriding
   - inheritance, subtyping
   - scala's type system
     - Any and Nothing
     - AnyRef and AnyVal
   - pattern matching
   - sealed trait
   - final
** Objects that are this and that
   - Extending multiple traits
   - Linearization / trait composition
   - Self types
   - is-a vs has-a
** Objects that contain other objects
   - Generic types
     - Tuple and option (introduce via examples)
   - Type bounds
   - Generic methods
   - Contra- and co-variance
     - Protip: forget this stuff
* Collections
* Functional Programming Fundamentals
** Higher-order functions
** Structural Recursion
** Higher-order Function vs Pattern Matching
** Modelling with Types
*** There or Not?
*** Functional Error Handling
** Combinators
   - Example: parsing
* Open Extension of Objects
** Implicits Classes
   - Implicit classes
   - Context bounds
** Type Classes
   - Type classes
   -
** More Implicit Machinery
   - Implicit values and implicit parameters
     - Implicit conversions
     - View bounds
   - Design guidelines for implicits
* Domain Specific Languages
** Custom pattern matching
** Delaying Evaluation
   - lazy vals
   - call by name
* Unscheduled Topics
  - var
    This arises in some exercises in collections
  - private vs public
    Briefly mentioned in one exercise
  - import
    Occurs in a few examples
  - unapply
    Should be in DSL or functional programming
* General Todo
  The text could be more explicit at pulling out the main themes of the course, which are:

  - Modelling data with Scala
    - Sum types (traits and extension; sealed and final)
    - Product types (extension of multiple traits)
    - Has-a vs Is-a (instance variables; generics)

  - Processing data
    - Using pattern matching
    - Using higher order functions
    - The shape of the code mirrors the shape of the data (i.e. structural recursion)

  - Sequencing computation using higher order functions
    - map / flatMap / fold (starts with Box, goes through the course)
    - Monads

  - Using the type system to enforce useful constraints
    - Complete pattern matching on sealed traits
    - Option, Try, and other Monads
